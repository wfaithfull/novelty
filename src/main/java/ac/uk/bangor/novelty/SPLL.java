package ac.uk.bangor.novelty;

import ac.uk.bangor.novelty.windowing.FixedWindowPair;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.math3.distribution.ChiSquaredDistribution;

/**
 * @author Will Faithfull
 */
@Slf4j
public class SPLL extends AbstractKMeansQuantizingDetector {

    ChiSquaredDistribution cdf;

    public SPLL(FixedWindowPair<double[]> windowPair, int K) {
        super(windowPair, K);
    }

    @Override
    protected boolean change(double[] p1, double[] p2) {

        if(cdf == null) {
            int df = getNFeatures();

            // If the data in W2 was generated by process P1, then the average of the squared mahalanobis distances
            // between the W2 observations and the cluster means should be distributed according to a chi-squared
            // distribution with n degrees of freedom, where n is the dimensionality of the feature space.
            cdf = new ChiSquaredDistribution(df);
        }

        double[] distances = getMinClusterToObservationDistances();
        double likelihoodTerm = 0;
        for(int i=0;i<distances.length;i++) {
            likelihoodTerm += distances[i];
        }
        likelihoodTerm = likelihoodTerm / distances.length;

        double cumulativeProbability = cdf.cumulativeProbability(likelihoodTerm);
        if((1-cumulativeProbability) < cumulativeProbability)
            cumulativeProbability = 1-cumulativeProbability;

        return cumulativeProbability < 0.05;
    }

}
